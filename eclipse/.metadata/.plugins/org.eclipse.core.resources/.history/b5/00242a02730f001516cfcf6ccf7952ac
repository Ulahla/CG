package SB_exercise2;

import org.lwjgl.LWJGLException;
import org.lwjgl.Sys;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import org.lwjgl.opengl.GL11;
import org.lwjgl.util.glu.GLU;


public class Universe implements InteractiveItem {

	public  int width  = 800;
	public  int height = 600;
	public  long lastTime = 0;
	public  float timeDiff = 0;
	public  boolean end = false; 
	public final float SUNSIZE = 100.f;
	public Planet sun;
	public Planet earth;

	boolean fillmode = true;

	public static void main(String[] args) {
		
		Universe universe = new Universe();
		universe.run();
	}

	
	public void setup(){
		try {
			Display.setDisplayMode(new DisplayMode(width, height));
			Display.create();
			
			
		} catch (LWJGLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//set OpenGL perspective
		GL11.glMatrixMode(GL11.GL_PROJECTION);
		GL11.glLoadIdentity();
		GLU.gluPerspective(45f,width/(float)height, 0.1f, 3000.f);
		GL11.glMatrixMode(GL11.GL_MODELVIEW);
		
		// Set Background Color
		GL11.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
		
		// initialize Planets
		sun = new Planet("Sun");
//		sun.addChild(earth = new Planet ("Earth"));
		earth = new Planet ("Earth");
		
		
		lastTime = Sys.getTime();
	}
	
public void run(){
		
		setup();
		
		while(!end){
			update();
			render();
		}
	}



//private void drawLine(int xs, int ys, int xe, int ye) {
//	GL11.glBegin(GL11.GL_QUADS);
//	GL11.glVertex2d(xs, ys);
//	GL11.glVertex2d(xs, ye);
//	GL11.glVertex2d(xe, ye);
//	GL11.glVertex2d(xe, ys);
//	GL11.glEnd();
//}


public void update(){
	long aktTime = Sys.getTime();
	
	
	// Update Planets
	sun.update();
	
	
	if(Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) end = true;
	
	if(Keyboard.isKeyDown(Keyboard.KEY_SPACE) && fillmode ){
		GL11.glPolygonMode(GL11.GL_FRONT_AND_BACK,  GL11.GL_LINE);
		fillmode = false;
	}
	else if(Keyboard.isKeyDown(Keyboard.KEY_SPACE) && !fillmode ){
		GL11.glPolygonMode(GL11.GL_FRONT_AND_BACK,  GL11.GL_FILL);
		fillmode = true;
	}
	
	timeDiff = ((float)(aktTime-lastTime))/Sys.getTimerResolution();
	lastTime = aktTime;
	Display.update();
	Display.sync(20);
	end |= Display.isCloseRequested();
}


@Override
public void render() {
	GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
	
	// Reset Matrix
	GL11.glMatrixMode(GL11.GL_MODELVIEW);
	GL11.glLoadIdentity();
	
	// Initialize Camera
	float[] cameraPos = new float[]{0, 0 , -1000};
	
	// Set Camera Position
	GLU.gluLookAt(cameraPos[0], cameraPos[1], cameraPos[2], 0, 0, 0, 0, 1, 0);

	// rotate around Mother
	
	// translate Planet
	
	// rotate Planet

	// draw Planet
	
//	GL11.glPushMatrix();
//	sun.rotate(90,0,1.f,0);
	sun.render(SUNSIZE, 20, 20, 1.f, 1.f, 0.f);
//	GL11.glPopMatrix();
	
	
	// render Earth
	GL11.glTranslatef(100.f, 0, 0);
	earth.render((SUNSIZE/10.f), 20, 20, 0, 0, 1.f);
}

@Override
public void finish() {
	// TODO Auto-generated method stub
	
}





}